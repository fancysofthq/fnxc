primitive Slice(Type T, Size S : SizeLiteral) where \{{ S:val() > 0 }}
  static def new(..varg : T) : Slice(T, \{{ varg:size() }})
    var new = Slice(T, \{{ varg:size() }}).new

    \{% for i = 0, varg:size() - 1 do %}
      new[\{{ i }}] = varg[\{{ i }}]
    \{% end %}

    return new
  end

  @[Native]
  def initialize
  end

  @[Native]
  unsafe const def get!(index : Size) : T
  end

  @[MayRaise(IndexError)]
  const def get(index : Size) : T
    if index >= \{{ S:val() }} { raise IndexError.new }
    return unsafe { get!(index) }
  end

  @[Native]
  const def get(index : L) : T forall L : SizeLiteral
  end

  delegate [] -> get

  @[Native]
  unsafe def set!(index : Size, val : T) : T
  end

  @[MayRaise(IndexError)]
  def set(index : Size, val : T) : T
    if index >= \{{ S:val() }} { raise IndexError.new }
    return unsafe { set!(index, val) }
  end

  @[Native]
  def set(index : L, val : T) : T forall L : SizeLiteral
  end

  delegate []= -> set

  @[NoRaise]
  const def each(T ->) : Void
    \{% for i = 0, S:val() - 1 do %}
      yield unsafe { get!(\{{ i }}) }
    \{% end %}
  end

  @[NoRaise]
  const def map(T -> U) : Slice(U, S) forall U
    var new = Slice(U, S).new

    \{% for i = 0, S:val() - 1 do %}
      new[\{{ i }}] = yield unsafe { get!(\{{ i }}) }
    \{% end %}

    return new
  end

  # Concatenate self with *other*, returning a new `Slice`.
  #
  # ```
  # var s = {1, 2}.concat({"foo"})
  # @assert s == {1, 2, "foo"}
  # @assert @typeof(s) == "Slice(Union(Int32, String), 3)"
  # ```
  @[NoRaise]
  const def concat(other : Slice(U, V)) : Slice(Union(T, U), S + V)
  forall U, V : SizeLiteral
    var new = Slice(Union(T, U), S + V).new

    \{% for i = 0, S:val() - 1 do %}
      new[\{{ i }}] = unsafe { get!(\{{ i }}) }
    \{% end %}

    \{% for i = 0, V:val() - 1 do %}
      new[\{{ S:val() - 1 + i }}] = unsafe { other.get!(\{{ i }}) }
    \{% end %}

    return new
  end

  delegate + -> concat

  @[NoRaise]
  const def == (other : Slice(T, S)) : Bool
    \{% for i = 0, S:val() - 1 do %}
      if unsafe { get!(\{{ i }}) != other.get!(\{{ i }}) }
        return false
      end
    \{% end %}

    return true
  end
end
