@[ThreadLocal]
private exception : Void*

@[ThreadLocal]
private backtrace : List<NamedTuple<path: Char*, row: Int32, col: Int32>>

# Onyx initialization?
export int main() {
  init_static_vars()
  exit_code = 0

  begin
    onyx_main()
  rescue (e, trace : List<Tuple<Char*, Int32, Int32>>*)
    unsafe
      $printf("Unhandled error of type %s:\n", \@typeof(e))
      trace->each ~> $printf("At %s:%d:%d\n", ..&)
    end

    exit_code = 1
  end

  call_destructors()
  return exit_code
}

# If UInt16 is 0, it's valid return;
# otherwise it's the exception type
fun foo : Tuple<UInt16, Union<NoReturn>>
  if @rand?
    raise "Shiet" # return <1, `pointer to "Shiet"`>
  else
    raise new Unique<String>("Shiet") # return <2, `pointer to the string`>
  end

  return 42 # return <0, 42>
end

fun bar
  foo()
catch Char* # If 1
rescue e : Unique<String> # If 2
  @backtrace.each ~> @pp &
end

fun main
  foo()
  bar()
end
