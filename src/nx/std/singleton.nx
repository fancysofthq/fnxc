# A thread-safe singleton implementation.
module Singleton
  private static instance_exists? : Bool = false
  protected static instance_var : self~

  threadsafe static def instance : self
    if !@atomicget(instance_exists?)
      @atomicset(instance_exists?, true)
      volatile { instance_var = (private)self() }
    end

    return instance_var.novoid!
  end
end
