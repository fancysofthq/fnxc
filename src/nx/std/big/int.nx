import "gmp" from "gmp"

class Big::Int
  derive Numeric
  derive Numeric::Integral

  protected const ref!! = uninitialized $mpz_t

  def initialize
    unsafe { $mpz_init(ref!!) }
  end

  # Initialize with a `String`.
  # This is the initializer used for the `BI` literal.
  #
  # ```
  # new Big::Int("3141592653589793238462643383279502884") ==
  #   3141592653589793238462643383279502884I
  # ```
  def initialize(string : String)
    unsafe { $mpz_init_set_str(ref!!, string, 10) }
  end

  # Initialize with at least 32-bit `UInt`.
  #
  #
  def initialize(uint : $`unsigned long int`)
    unsafe { $mpz_init_set_ui(ref!!, uint) }
  end

  # Initialize with at least 32-bit `UInt`.
  def initialize(sint : $`signed long int`)
    unsafe { $mpz_init_set_si(ref!!, sint) }
  end

  # Initialize with at least 64-bit `Float`.
  def initialize(double : $double)
    unsafe { $mpz_init_set_d(ref!!, double) }
  end

  def finalize
    unsafe { $mpz_clear(ref!!) }
  end

  def add(another : self) : self
    unsafe { $mpz_add(ref!!, ref!!, another.ref!!) }
    return self
  end

  def add(num : $`unsigned long int`) : self
    unsafe { $mpz_add_ui(ref!!, ref!!, num) }
    return self
  end

  def sub(another : self) : self
    unsafe { $mpz_sub(ref!!, ref!!, another.ref!!) }
    return self
  end

  def sub(num : $`unsigned long int`) : self
    unsafe { $mpz_sub(ref!!, ref!!,num) }
    return self
  end
end
