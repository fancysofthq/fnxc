require "../fiber.nx"

class Scheduler::Fiber::Pool
  private final pool = Stack<Fiber*>()
  private final mutex = Mutex()
  private final condvar = Condvar()

  # The total amount of fibers allocated.
  private mut counter : Size = 0

  def checkout : Fiber*
    const new_id : Size

    mutex.sync -> (mtx) do
      @loop -> do
        if fiber = pool.pop?
          return fiber
        else
          const old = @atomicget(counter)

          if old == Size.max
            condvar.wait(mtx)
          else
            new_id = @atomicadd(counter, 1)
          end
        end
      end
    end

    const fiber = unsafe { $malloc(@sizeof(Fiber)).as!!(Fiber*) }
    *fiber.initialize(id: new_id)

    return fiber
  end

  def release(fiber : Fiber*) : Void
    mutex.sync -> do
      pool.push(fiber)
      condvar.broadcast(&)
    end
  end
end
